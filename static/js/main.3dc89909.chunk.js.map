{"version":3,"sources":["types/FilterStatus.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","utils/filterTodos.ts","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterStatus","actions","todo","type","payload","currentTodoReducer","state","action","initialParams","query","status","filterReducer","params","ALL","ACTIVE","COMPLETED","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoItem","dispatch","className","classNames","id","completed","title","onClick","currentTodoActions","TodoList","filteredTodos","sortBy","length","toLowerCase","includes","getFilteredTodos","map","TodoFilter","value","onChange","e","target","filterActions","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","loading","setLoading","useEffect","userId","finally","href","email","name","App","todosFromServer","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3dc89909.chunk.js","sourcesContent":["export enum FilterStatus {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { FilterParams } from '../types/FilterParams';\nimport { FilterStatus } from '../types/FilterStatus';\n\ntype FilterAllAction = { type: 'filter/ALL' };\ntype FilterActiveAction = { type: 'filter/ACTIVE' };\ntype FilterCompletedAction = { type: 'filter/COMPLETED' };\ntype FilterSetQueryAction = { type: 'filter/SETQUERY', payload: string };\ntype Action = FilterAllAction\n| FilterActiveAction\n| FilterCompletedAction\n| FilterSetQueryAction;\n\nconst initialParams: FilterParams = {\n  query: '',\n  status: 'all',\n};\n\nconst setFilterAll = (): FilterAllAction => {\n  return { type: 'filter/ALL' };\n};\n\nconst setFilterActive = (): FilterActiveAction => {\n  return { type: 'filter/ACTIVE' };\n};\n\nconst setFilterCompleted = (): FilterCompletedAction => {\n  return { type: 'filter/COMPLETED' };\n};\n\nconst setFilterQuery = (query: string):FilterSetQueryAction => {\n  return { type: 'filter/SETQUERY', payload: query };\n};\n\nexport const actions = {\n  setFilterAll,\n  setFilterActive,\n  setFilterCompleted,\n  setFilterQuery,\n};\n\nconst filterReducer = (\n  params: FilterParams = initialParams,\n  action: Action,\n): FilterParams => {\n  switch (action.type) {\n    case 'filter/ALL':\n      return { ...params, status: FilterStatus.ALL };\n\n    case 'filter/ACTIVE':\n      return { ...params, status: FilterStatus.ACTIVE };\n\n    case 'filter/COMPLETED':\n      return { ...params, status: FilterStatus.COMPLETED };\n\n    case 'filter/SETQUERY':\n      return { ...params, query: action.payload };\n\n    default:\n      return params;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (todos: Todo[] = [], action: SetTodosAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const handleButtonClick = () => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={classNames(\n        { 'has-background-info-light': currentTodo?.id === todo.id },\n      )}\n      key={todo.id}\n    >\n      <td className=\"is-vcentered\">{todo.id}</td>\n      <td className=\"is-vcentered\">\n        {todo.completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p className={\n          todo.completed\n            ? 'has-text-success'\n            : 'has-text-danger'\n        }\n        >\n          {todo.title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => handleButtonClick()}\n        >\n          <span className=\"icon\">\n            <i className={classNames(\n              'far', {\n                'fa-eye-slash': todo.id === currentTodo?.id,\n                'fa-eye': todo.id !== currentTodo?.id,\n              },\n            )}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useAppSelector } from '../../app/hooks';\nimport { getFilteredTodos } from '../../utils/filterTodos';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const filteredTodos = getFilteredTodos(todos, query, status);\n\n  return (\n    <>\n      {!filteredTodos.length && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {!!filteredTodos.length && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n\n            {filteredTodos.map(todo => (\n              <TodoItem todo={todo} key={todo.id} />\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import { FilterStatus } from '../types/FilterStatus';\nimport { Todo } from '../types/Todo';\n\nexport function getFilteredTodos(\n  todos: Todo[],\n  query: string,\n  sortBy: string,\n) {\n  let filteredTodos = todos;\n\n  if (query.length > 0) {\n    filteredTodos = filteredTodos.filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n    ));\n  }\n\n  switch (sortBy) {\n    case FilterStatus.ALL:\n      return filteredTodos;\n\n    case FilterStatus.ACTIVE:\n      return filteredTodos.filter(todo => todo.completed === false);\n\n    case FilterStatus.COMPLETED:\n      return filteredTodos.filter(todo => todo.completed === true);\n\n    default:\n      return filteredTodos;\n  }\n}\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { FilterStatus } from '../../types/FilterStatus';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const setStatusActive = () => dispatch(filterActions.setFilterActive());\n  const setStatusCompleted = () => dispatch(filterActions.setFilterCompleted());\n  const setStatusALL = () => dispatch(filterActions.setFilterAll());\n\n  const handleSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    switch (e.target.value) {\n      case FilterStatus.ACTIVE:\n        setStatusActive();\n        break;\n\n      case FilterStatus.COMPLETED:\n        setStatusCompleted();\n        break;\n\n      case FilterStatus.ALL:\n      default:\n        setStatusALL();\n    }\n  };\n\n  const handleQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setFilterQuery(e.target.value));\n  };\n\n  const handleQueryClear = () => {\n    dispatch(filterActions.setFilterQuery(''));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleSelect}\n          >\n            <option value={FilterStatus.ALL}>\n              All\n            </option>\n            <option value={FilterStatus.ACTIVE}>\n              Active\n            </option>\n            <option value={FilterStatus.COMPLETED}>\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          value={query}\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query.length > 0 && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleQueryClear}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (currentTodo) {\n      setLoading(true);\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .finally(() => setLoading(false));\n    }\n  }, [currentTodo?.userId]);\n\n  const handleCloseModal = () => (\n    dispatch(currentTodoActions.removeTodo())\n  );\n\n  return (\n    <div\n      className={classNames('modal', { ' is-active': currentTodo })}\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n\n      {loading && (\n        <Loader />\n      )}\n\n      {!loading && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    getTodos()\n      .then((todosFromServer) => dispatch(todosActions.setTodos(todosFromServer)))\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {(loading && !currentTodo) && (\n                <Loader />\n              )}\n              {!!todos.length && (\n                <TodoList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}